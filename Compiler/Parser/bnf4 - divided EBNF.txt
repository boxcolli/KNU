<program>				::= <declaration-list>
<declaration-list>	::= <declaration> { <declaration> }
<declaration>			::= <var-declaration>
								| <fun-declaration>
<var-declaration>	::= <type-specifier> ID SEMI
								| <type-specifier> ID LSBRACK NUM RSBRACK SEMI
<type-specifier>		::= INT
								| VOID
<fun-declaration>	::= <type-specifier> ID LPAREN <params> RPAREN <compound-stmt>
<params>					::= <param-list>
								| VOID
<param-list>			::= <param> { COMMA <param> }
<param>					::= <type-specifier> ID [ LSBRACK RSBRACK ]
<compound-stmt>		::= LCBRACK <local-declarations> <statement-list> RCBRACK
<local-declarations>::= <var-declaration> { <var-declaration> }
								| EMPTY
<statement-list>		::= <statement> { <statement> }
								| EMPTY
<statement>				::= <expression-stmt>
								| <compound-stmt>
								| <selection-stmt>
								| <iteration-stmt>
								| <return-stmt>
<expression-stmt>	::= [ <expression> ] SEMI
<selection-stmt>		::= IF LPAREN <expression> RPAREN <statement> [ ELSE <statement> ]
<iteration-stmt>		::= WHILE LPAREN <expression> RPAREN <statement>
<return-stmt>			::= RETURN [ <expression> ] SEMI
<expression>			::= <var> EQ <expression>
								| <simple-expression>
<var>						::= ID [ LSBRACK <expression> RSBRACK ]
<simple-expression>	::= <additive-expression> [ <relop> <additive-expression> ]
<relop>					::= LTE
								| LT
								| GT
								| GTE
								| ASSIGN
								| NEQ
<additive-expression>	::= <term> { <addop> <term> }
<addop>					::= ADD | SUB
<term>					::= <factor> { <mulop> <factor> }
<mulop>					::= MUL
								| DIV
<factor>					::= LPAREN <expression> RPAREN
								| <var>
								| <call>
								| NUM
<call>					::= ID LPAREN <args> RPAREN
<args>					::= <arg-list>
								| EMPTY
<arg-list>				::= <expression> { COMMA <expression> }